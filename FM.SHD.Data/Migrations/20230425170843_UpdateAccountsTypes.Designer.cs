// <auto-generated />
using System;
using FM.SHD.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FM.SHD.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230425170843_UpdateAccountsTypes")]
    partial class UpdateAccountsTypes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.17");

            modelBuilder.Entity("FM.SHD.Domain.Accounts.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("NUMERIC");

                    b.Property<string>("CurrentSum")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<long>("IdentityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("InitialSum")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("NUMERIC");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("IdentityId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("FM.SHD.Domain.Accounts.AccountCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("NUMERIC");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "IX_AccountCategory_Id")
                        .IsUnique();

                    b.ToTable("AccountCategory");
                });

            modelBuilder.Entity("FM.SHD.Domain.Categories.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "IX_Categories_Id")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("FM.SHD.Domain.Contragents.Contragent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Contragents");
                });

            modelBuilder.Entity("FM.SHD.Domain.Currencies.Currency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "IX_Currency_Id")
                        .IsUnique();

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("FM.SHD.Domain.Transactions.Receipt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("AccountsId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Accounts_id");

                    b.Property<long?>("ContragentId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Contragent_id");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("IdentityId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Identity_id");

                    b.HasKey("Id");

                    b.HasIndex("AccountsId");

                    b.HasIndex("ContragentId");

                    b.HasIndex("IdentityId");

                    b.HasIndex(new[] { "Id" }, "IX_Receipt_Id")
                        .IsUnique();

                    b.ToTable("Receipt");
                });

            modelBuilder.Entity("FM.SHD.Domain.Transactions.Transaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("CategoryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Category_id");

                    b.Property<long?>("ContragentId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Contragent_id");

                    b.Property<long?>("CreditAccountId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CreditAccount_id");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("DebitAccountId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("DebitAccount_id");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<long?>("IdentityId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Identity_id");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<long?>("ReceiptId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Receipt_id");

                    b.Property<string>("Sum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("0");

                    b.Property<long>("TypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Type_id");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreditAccountId");

                    b.HasIndex("DebitAccountId");

                    b.HasIndex("ReceiptId");

                    b.HasIndex("TypeId");

                    b.HasIndex(new[] { "Id" }, "IX_Transactions_Id")
                        .IsUnique();

                    b.HasIndex(new[] { "Id" }, "Id_index");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("FM.SHD.Domain.Transactions.TransactionState", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "IX_TransactionState_Id")
                        .IsUnique();

                    b.ToTable("TransactionState");
                });

            modelBuilder.Entity("FM.SHD.Domain.Transactions.TransactionType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "IX_TransactionType_Id")
                        .IsUnique();

                    b.ToTable("TransactionType");
                });

            modelBuilder.Entity("FM.SHD.Domain.Users.Identity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "IX_Identity_Id")
                        .IsUnique();

                    b.ToTable("Identity");
                });

            modelBuilder.Entity("FM.SHD.Domain.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "IX_Users_Id")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FM.SHD.Domain.Accounts.Account", b =>
                {
                    b.HasOne("FM.SHD.Domain.Accounts.AccountCategory", "Category")
                        .WithMany("Accounts")
                        .HasForeignKey("CategoryId");

                    b.HasOne("FM.SHD.Domain.Users.Identity", "Identity")
                        .WithMany("Accounts")
                        .HasForeignKey("IdentityId")
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Identity");
                });

            modelBuilder.Entity("FM.SHD.Domain.Transactions.Receipt", b =>
                {
                    b.HasOne("FM.SHD.Domain.Accounts.Account", "Accounts")
                        .WithMany("Receipts")
                        .HasForeignKey("AccountsId")
                        .IsRequired();

                    b.HasOne("FM.SHD.Domain.Contragents.Contragent", "Contragent")
                        .WithMany("Receipts")
                        .HasForeignKey("ContragentId");

                    b.HasOne("FM.SHD.Domain.Users.Identity", "Identity")
                        .WithMany("Receipts")
                        .HasForeignKey("IdentityId");

                    b.Navigation("Accounts");

                    b.Navigation("Contragent");

                    b.Navigation("Identity");
                });

            modelBuilder.Entity("FM.SHD.Domain.Transactions.Transaction", b =>
                {
                    b.HasOne("FM.SHD.Domain.Categories.Category", "Category")
                        .WithMany("Transactions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FM.SHD.Domain.Accounts.Account", "CreditAccount")
                        .WithMany("TransactionCreditAccounts")
                        .HasForeignKey("CreditAccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FM.SHD.Domain.Accounts.Account", "DebitAccount")
                        .WithMany("TransactionDebitAccounts")
                        .HasForeignKey("DebitAccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FM.SHD.Domain.Transactions.Receipt", "Receipt")
                        .WithMany("Transactions")
                        .HasForeignKey("ReceiptId");

                    b.HasOne("FM.SHD.Domain.Transactions.TransactionType", "Type")
                        .WithMany("Transactions")
                        .HasForeignKey("TypeId")
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("CreditAccount");

                    b.Navigation("DebitAccount");

                    b.Navigation("Receipt");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("FM.SHD.Domain.Accounts.Account", b =>
                {
                    b.Navigation("Receipts");

                    b.Navigation("TransactionCreditAccounts");

                    b.Navigation("TransactionDebitAccounts");
                });

            modelBuilder.Entity("FM.SHD.Domain.Accounts.AccountCategory", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("FM.SHD.Domain.Categories.Category", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("FM.SHD.Domain.Contragents.Contragent", b =>
                {
                    b.Navigation("Receipts");
                });

            modelBuilder.Entity("FM.SHD.Domain.Transactions.Receipt", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("FM.SHD.Domain.Transactions.TransactionType", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("FM.SHD.Domain.Users.Identity", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Receipts");
                });
#pragma warning restore 612, 618
        }
    }
}
